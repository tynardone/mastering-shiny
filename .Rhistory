install.packages("shiny")
library(shiny)
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('app_2')
runApp()
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
pr
#shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
print(ui)
#shinyApp(ui, server)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
?sliderInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
?plotOutput
?renderPlot
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
install.packages("reactable")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dir.create("neiss")
#> Warning in dir.create("neiss"): 'neiss' already exists
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
download.file(paste0(url, name), paste0("neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
ls
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries
products <- vroom::vroom("neiss/products.tsv")
products
#> # A tibble: 38 × 2
#>   prod_code title
#>       <dbl> <chr>
#> 1       464 knives, not elsewhere classified
#> 2       474 tableware and accessories
#> 3       604 desks, chests, bureaus or buffets
#> 4       611 bathtubs or showers
#> 5       649 toilets
#> 6       676 rugs or carpets, not specified
#> # … with 32 more rows
population <- vroom::vroom("neiss/population.tsv")
population
#> # A tibble: 170 × 3
#>     age sex    population
#>   <dbl> <chr>       <dbl>
#> 1     0 female    1924145
#> 2     0 male      2015150
#> 3     1 female    1943534
#> 4     1 male      2031718
#> 5     2 female    1965150
#> 6     2 male      2056625
#> # … with 164 more rows
selected <- injuries %>% filter(code == 649)
selected <- injuries %>% filter(code == 649)
library(tidyverse)
selected <- injuries %>% filter(code == 649)
selected <- injuries %>% filter(prod_code == 649)
nrow(selected)
selected %>% count(location, wt=weight, sort=TRUE)
summary <- selected %>%
count(age, sex, wt = weight)
summary
#> # A tibble: 208 × 3
#>     age sex         n
#>   <dbl> <chr>   <dbl>
#> 1     0 female   4.76
#> 2     0 male    14.3
#> 3     1 female 253.
#> 4     1 male   231.
#> 5     2 female 438.
#> 6     2 male   632.
#> # … with 202 more rows
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
selected <- injuries %>% filter(prod_code == 649)
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>% filter(prod_code == 649)
nrow(selected)
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>%
filter(prod_code == 649) #code 649 is for 'toilets'
summary <- selected %>%
count(age, sex, wt = weight)
summary
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>%
filter(prod_code == 649) #code 649 is for 'toilets'
summary <- selected %>%
count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, color = sex)) +
geom_line()
summary %>%
ggplot(aes(age, n, color = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>%
filter(prod_code == 649) #code 649 is for 'toilets'
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, n, color = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
View(summary)
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>%
filter(prod_code == 649) #code 649 is for 'toilets'
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, color = sex)) +
geom_line() +
labs(y = "Injuries per 10,000 people")
library(shiny)
library(vroom)
library(tidyverse)
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
products <- vroom::vroom("neiss/products.tsv")
population <- vroom::vroom("neiss/population.tsv")
selected <- injuries %>%
filter(prod_code == 649) #code 649 is for 'toilets'
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, color = sex)) +
geom_line() +
labs(y = "Injuries per 10,000 people")
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", choices = prod_codes)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp()
install.packages('rmarkdown')
render("R_for_data_science")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
library(rmarkdown)
render("R_for_data_science")
render("R_for_data_science.Rmd")
cd
cd ..
ls
setwd("~/Projects/r4ds")
render("R_for_data_science_notes")
render("R_for_data_science_notes.Rmd")
?render
render("R_for_data_science_notes.Rmd", "pdf_document")
flights
library(tidyverse)
library(modelr)
library(nycflights13)
flights
flights %>% filter(month == 1, day == 1)
flights %>% select(year, month, day)
by_day <- group_by(flights, year, month, day)
by_day
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
getcwd()
getwd()
getwed()
